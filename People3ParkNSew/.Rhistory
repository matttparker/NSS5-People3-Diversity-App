schools %>%
filter(subgroup == 'All Students',
grade == 'All Grades',
subject == c('Algebra I', 'English I'),
pct_below_bsc > 20) %>%
group_by(system_name, school_name) %>%
filter(n() == 2) %>%
summarise(n_distinct(school))
schools %>%
filter(subject == 'Algebra I',
subgroup == 'All Students',
grade != 'Missing Grade',
grade != 'All Grades') %>%
filter(!is.na(pct_adv)) %>%
group_by(grade) %>%
select(grade, pct_adv) %>%
mutate(pct_adv = as.numeric(pct_adv),
grade = as.numeric(grade)) %>%
summarise(mean(pct_adv)) %>%
data.frame() %>%
ggplot(aes(x=grade, y=mean.pct_adv.)) + geom_col()
alg_scatter <- schools %>%
filter(subgroup == 'All Students',
grade == 'All Grades',
subject == c('Algebra I', 'Algebra II')) %>%
group_by(system_name, school_name) %>%
filter(n() == 2) %>%
ungroup() %>%
select(system_name, school_name:subject, pct_adv) %>%
pivot_wider(names_from = subject, values_from = pct_adv) %>%
drop_na() %>%
rename('Algebra_I' = 'Algebra I', 'Algebra_II' = 'Algebra II') %>%
mutate(Algebra_I = as.numeric(Algebra_I),
Algebra_II = as.numeric(Algebra_II)) %>%
select(Algebra_I:Algebra_II) %>%
data.frame()
cor(alg_scatter)
ggplot(alg_scatter, aes(x=Algebra_I, y=Algebra_II)) + geom_point()
install.packages("ggpubr")
schools_high_alg_1 = schools %>%
filter(subject == 'Algebra I',
grade == 'All Grades',
subgroup == 'All Students') %>% View(schools_high_alg_1)
schools_high_alg_1 = schools %>%
filter(subject == 'Algebra I',
grade == 'All Grades',
subgroup == 'All Students')# %>%
View(schools_high_alg_1)
schools_high_alg_1 = schools %>%
filter(subject == 'Algebra I',
grade == 'All Grades',
subgroup == 'All Students') %>%
mean(valid_tests)
schools_high_alg_1 = schools %>%
filter(subject == 'Algebra I',
grade == 'All Grades',
subgroup == 'All Students') %>%
mean(valid_tests, na.rm=TRUE)
schools_high_alg_1 = schools %>%
filter(subject == 'Algebra I',
grade == 'All Grades',
subgroup == 'All Students') %>%
mutate(valid_tests = int(valid_tests)) %>%
mean(valid_tests, na.rm=TRUE)
schools_high_alg_1 = schools %>%
filter(subject == 'Algebra I',
grade == 'All Grades',
subgroup == 'All Students') %>%
mutate(valid_tests = int(valid_tests))
schools_high_alg_1 = schools %>%
filter(subject == 'Algebra I',
grade == 'All Grades',
subgroup == 'All Students') %>%
mutate(valid_tests = as.numeric(valid_tests))
View(schools_high_alg_1)
schools_high_alg_1 = schools %>%
filter(subject == 'Algebra I',
grade == 'All Grades',
subgroup == 'All Students') %>%
mutate(valid_tests = as.numeric(valid_tests))
mean(schools_high_alg_1$valid_tests)
schools_high_alg_1 = schools %>%
filter(subject == 'Algebra I',
grade == 'All Grades',
subgroup == 'All Students') #%>%
#mutate(valid_tests = as.numeric(valid_tests))
mean(schools_high_alg_1$valid_tests)
schools_high_alg_1 = schools %>%
filter(subject == 'Algebra I',
grade == 'All Grades',
subgroup == 'All Students')
mean(schools_high_alg_1$valid_tests)
mean(schools$valid_tests)
schools_high_alg_1 = schools %>%
filter(subject == 'Algebra I',
grade == 'All Grades',
subgroup == 'All Students',
pct_prof_adv > 95)
mean(schools_high_alg_1$valid_tests)
#mean(schools$valid_tests)
schools %>%
filter(subject == 'Algebra I',
grade == 'All Grades',
subgroup == 'All Students',
pct_prof_adv > 95) %>%
mean(valid_tests)
#mean(schools$valid_tests)
schools %>%
filter(subject == 'Algebra I',
grade == 'All Grades',
subgroup == 'All Students',
pct_prof_adv > 95) %>%
summarise(mean(valid_tests))
#mean(schools$valid_tests)
schools %>%
filter(subject == 'Algebra I',
grade == 'All Grades',
subgroup == 'All Students',
pct_prof_adv > 95) %>%
summarise(mean(valid_tests))
schools %>%
filter(subject == 'Algebra I',
grade == 'All Grades',
subgroup == 'All Students') %>%
summarise(mean(valid_tests))
schools %>%
filter(subject == 'Algebra I',
grade == 'All Grades',
subgroup == 'All Students',
pct_prof_adv < 25) %>%
summarise(mean(valid_tests))
schools %>%
filter(subject == 'Algebra I',
grade == 'All Grades',
subgroup == 'All Students') %>%
summarise(mean(valid_tests))
schools %>%
filter(subject == 'Algebra I',
grade == 'All Grades',
subgroup == 'All Students') %>%
ggplot(aes(x=pct_prof_adv, y=valid_tests)) +
geom_point()
setwd("~/Documents/NSS/Class_Slides_Notebooks/20_12_19_unsupervised/Unsupervised-01-PCA/exercises")
options(scipen = 999)
library(tidyverse)
iris <- iris %>%
as_tibble()
View(iris)
?ggplot
aes
?ggplot::aes
ggplot(iris, aes(x=Petal.Width, y=Petal.Length, colour=Species)) + geom_point()
ggplot(iris, aes(x=Petal.Width, y=Petal.Length, colour=Species)) +
geom_point(shape = 21, color = 'black')
ggplot(iris, aes(x=Petal.Width, y=Petal.Length, fill=Species)) +
geom_point(shape = 21, color = 'black')
ggplot(iris, aes(x=Petal.Width, y=Petal.Length, fill=Species)) +
geom_point(shape = 21, color = 'black', size = 2)
ggplot(iris, aes(x=Petal.Width, y=Petal.Length, fill=Species)) +
geom_point(shape = 21, color = 'black')
ggplot(iris, aes(x=Petal.Width, y=Petal.Length, fill=Species)) +
geom_point(shape = 21, color = 'black', size = 2)
ggplot(iris, aes(x=Petal.Width, y=Petal.Length, fill=Species)) +
geom_point(shape = 21, color = 'black', size = 2) +
coord_fixed(ratio = 1)
ggplot(iris, aes(x=Petal.Length, y=Petal.Width, fill=Species)) +
geom_point(shape = 21, color = 'black', size = 2) +
coord_fixed(ratio = 1)
ggplot(iris, aes(x=Petal.Length, y=Petal.Width, fill=Species)) +
geom_point(shape = 21, color = 'black') +
coord_fixed(ratio = 1)
ggplot(iris, aes(x=Petal.Length, y=Petal.Width, fill=Species)) +
geom_point(shape = 21, color = 'black', size = 2) +
coord_fixed(ratio = 1)
# The angle of the line in degrees. ADJUST THIS
angle = 45
# For graphing purposes, we need to know the slope of this line
slope = sin(angle * pi / 180) / cos(angle * pi / 180)
# A bit of linear algebra to find the projections
iris_projection <- iris %>%
as_tibble() %>%
mutate(projection = (Petal.Length - mean(iris$Petal.Length)) * cos(angle * pi / 180)  + (Petal.Width - mean(iris$Petal.Width)) * sin(angle * pi / 180),
proj_x = mean(iris$Petal.Length) + projection * cos(angle * pi / 180), proj_y = mean(iris$Petal.Width) + projection * sin(angle*pi / 180))
# Then plot it
iris_projection %>%
ggplot(aes(x = Petal.Length, y = Petal.Width, fill = Species)) +
geom_abline(slope = slope, intercept = mean(iris$Petal.Width) - slope*mean(iris$Petal.Length)) +
geom_segment(aes(x = Petal.Length, y = Petal.Width, xend = proj_x, yend = proj_y)) +
geom_point(shape = 21, color = 'black', size = 2) +
coord_fixed(ratio = 1)
# And see how the metrics look
iris_projection %>%
summarize(reconstruction_error = mean(sqrt((Petal.Length - proj_x)^2 + (Petal.Width - proj_y)^2)),
variance_retained = var(projection) / (var(Petal.Length) + var(Petal.Width)))
# The angle of the line in degrees. ADJUST THIS
angle = 30
# For graphing purposes, we need to know the slope of this line
slope = sin(angle * pi / 180) / cos(angle * pi / 180)
# A bit of linear algebra to find the projections
iris_projection <- iris %>%
as_tibble() %>%
mutate(projection = (Petal.Length - mean(iris$Petal.Length)) * cos(angle * pi / 180)  + (Petal.Width - mean(iris$Petal.Width)) * sin(angle * pi / 180),
proj_x = mean(iris$Petal.Length) + projection * cos(angle * pi / 180), proj_y = mean(iris$Petal.Width) + projection * sin(angle*pi / 180))
# Then plot it
iris_projection %>%
ggplot(aes(x = Petal.Length, y = Petal.Width, fill = Species)) +
geom_abline(slope = slope, intercept = mean(iris$Petal.Width) - slope*mean(iris$Petal.Length)) +
geom_segment(aes(x = Petal.Length, y = Petal.Width, xend = proj_x, yend = proj_y)) +
geom_point(shape = 21, color = 'black', size = 2) +
coord_fixed(ratio = 1)
# And see how the metrics look
iris_projection %>%
summarize(reconstruction_error = mean(sqrt((Petal.Length - proj_x)^2 + (Petal.Width - proj_y)^2)),
variance_retained = var(projection) / (var(Petal.Length) + var(Petal.Width)))
# The angle of the line in degrees. ADJUST THIS
angle = 28
# For graphing purposes, we need to know the slope of this line
slope = sin(angle * pi / 180) / cos(angle * pi / 180)
# A bit of linear algebra to find the projections
iris_projection <- iris %>%
as_tibble() %>%
mutate(projection = (Petal.Length - mean(iris$Petal.Length)) * cos(angle * pi / 180)  + (Petal.Width - mean(iris$Petal.Width)) * sin(angle * pi / 180),
proj_x = mean(iris$Petal.Length) + projection * cos(angle * pi / 180), proj_y = mean(iris$Petal.Width) + projection * sin(angle*pi / 180))
# Then plot it
iris_projection %>%
ggplot(aes(x = Petal.Length, y = Petal.Width, fill = Species)) +
geom_abline(slope = slope, intercept = mean(iris$Petal.Width) - slope*mean(iris$Petal.Length)) +
geom_segment(aes(x = Petal.Length, y = Petal.Width, xend = proj_x, yend = proj_y)) +
geom_point(shape = 21, color = 'black', size = 2) +
coord_fixed(ratio = 1)
# And see how the metrics look
iris_projection %>%
summarize(reconstruction_error = mean(sqrt((Petal.Length - proj_x)^2 + (Petal.Width - proj_y)^2)),
variance_retained = var(projection) / (var(Petal.Length) + var(Petal.Width)))
# The angle of the line in degrees. ADJUST THIS
angle = 28
# For graphing purposes, we need to know the slope of this line
slope = sin(angle * pi / 180) / cos(angle * pi / 180)
# A bit of linear algebra to find the projections
iris_projection <- iris %>%
as_tibble() %>%
mutate(projection = (Petal.Length - mean(iris$Petal.Length)) * cos(angle * pi / 180)  + (Petal.Width - mean(iris$Petal.Width)) * sin(angle * pi / 180),
proj_x = mean(iris$Petal.Length) + projection * cos(angle * pi / 180), proj_y = mean(iris$Petal.Width) + projection * sin(angle*pi / 180))
# Then plot it
iris_projection %>%
ggplot(aes(x = Petal.Length, y = Petal.Width, fill = Species)) +
geom_abline(slope = slope, intercept = mean(iris$Petal.Width) - slope*mean(iris$Petal.Length)) +
geom_segment(aes(x = Petal.Length, y = Petal.Width, xend = proj_x, yend = proj_y)) +
geom_point(shape = 21, color = 'black', size = 2) +
coord_fixed(ratio = 1)
# And see how the metrics look
iris_projection %>%
summarize(reconstruction_error = mean(sqrt((Petal.Length - proj_x)^2 + (Petal.Width - proj_y)^2)),
variance_retained = var(projection) / (var(Petal.Length) + var(Petal.Width)))
# The angle of the line in degrees. ADJUST THIS
angle = 25
# For graphing purposes, we need to know the slope of this line
slope = sin(angle * pi / 180) / cos(angle * pi / 180)
# A bit of linear algebra to find the projections
iris_projection <- iris %>%
as_tibble() %>%
mutate(projection = (Petal.Length - mean(iris$Petal.Length)) * cos(angle * pi / 180)  + (Petal.Width - mean(iris$Petal.Width)) * sin(angle * pi / 180),
proj_x = mean(iris$Petal.Length) + projection * cos(angle * pi / 180), proj_y = mean(iris$Petal.Width) + projection * sin(angle*pi / 180))
# Then plot it
iris_projection %>%
ggplot(aes(x = Petal.Length, y = Petal.Width, fill = Species)) +
geom_abline(slope = slope, intercept = mean(iris$Petal.Width) - slope*mean(iris$Petal.Length)) +
geom_segment(aes(x = Petal.Length, y = Petal.Width, xend = proj_x, yend = proj_y)) +
geom_point(shape = 21, color = 'black', size = 2) +
coord_fixed(ratio = 1)
# And see how the metrics look
iris_projection %>%
summarize(reconstruction_error = mean(sqrt((Petal.Length - proj_x)^2 + (Petal.Width - proj_y)^2)),
variance_retained = var(projection) / (var(Petal.Length) + var(Petal.Width)))
# The angle of the line in degrees. ADJUST THIS
angle = 23
# For graphing purposes, we need to know the slope of this line
slope = sin(angle * pi / 180) / cos(angle * pi / 180)
# A bit of linear algebra to find the projections
iris_projection <- iris %>%
as_tibble() %>%
mutate(projection = (Petal.Length - mean(iris$Petal.Length)) * cos(angle * pi / 180)  + (Petal.Width - mean(iris$Petal.Width)) * sin(angle * pi / 180),
proj_x = mean(iris$Petal.Length) + projection * cos(angle * pi / 180), proj_y = mean(iris$Petal.Width) + projection * sin(angle*pi / 180))
# Then plot it
iris_projection %>%
ggplot(aes(x = Petal.Length, y = Petal.Width, fill = Species)) +
geom_abline(slope = slope, intercept = mean(iris$Petal.Width) - slope*mean(iris$Petal.Length)) +
geom_segment(aes(x = Petal.Length, y = Petal.Width, xend = proj_x, yend = proj_y)) +
geom_point(shape = 21, color = 'black', size = 2) +
coord_fixed(ratio = 1)
# And see how the metrics look
iris_projection %>%
summarize(reconstruction_error = mean(sqrt((Petal.Length - proj_x)^2 + (Petal.Width - proj_y)^2)),
variance_retained = var(projection) / (var(Petal.Length) + var(Petal.Width)))
# The angle of the line in degrees. ADJUST THIS
angle = 20
# For graphing purposes, we need to know the slope of this line
slope = sin(angle * pi / 180) / cos(angle * pi / 180)
# A bit of linear algebra to find the projections
iris_projection <- iris %>%
as_tibble() %>%
mutate(projection = (Petal.Length - mean(iris$Petal.Length)) * cos(angle * pi / 180)  + (Petal.Width - mean(iris$Petal.Width)) * sin(angle * pi / 180),
proj_x = mean(iris$Petal.Length) + projection * cos(angle * pi / 180), proj_y = mean(iris$Petal.Width) + projection * sin(angle*pi / 180))
# Then plot it
iris_projection %>%
ggplot(aes(x = Petal.Length, y = Petal.Width, fill = Species)) +
geom_abline(slope = slope, intercept = mean(iris$Petal.Width) - slope*mean(iris$Petal.Length)) +
geom_segment(aes(x = Petal.Length, y = Petal.Width, xend = proj_x, yend = proj_y)) +
geom_point(shape = 21, color = 'black', size = 2) +
coord_fixed(ratio = 1)
# And see how the metrics look
iris_projection %>%
summarize(reconstruction_error = mean(sqrt((Petal.Length - proj_x)^2 + (Petal.Width - proj_y)^2)),
variance_retained = var(projection) / (var(Petal.Length) + var(Petal.Width)))
# The angle of the line in degrees. ADJUST THIS
angle = 22
# For graphing purposes, we need to know the slope of this line
slope = sin(angle * pi / 180) / cos(angle * pi / 180)
# A bit of linear algebra to find the projections
iris_projection <- iris %>%
as_tibble() %>%
mutate(projection = (Petal.Length - mean(iris$Petal.Length)) * cos(angle * pi / 180)  + (Petal.Width - mean(iris$Petal.Width)) * sin(angle * pi / 180),
proj_x = mean(iris$Petal.Length) + projection * cos(angle * pi / 180), proj_y = mean(iris$Petal.Width) + projection * sin(angle*pi / 180))
# Then plot it
iris_projection %>%
ggplot(aes(x = Petal.Length, y = Petal.Width, fill = Species)) +
geom_abline(slope = slope, intercept = mean(iris$Petal.Width) - slope*mean(iris$Petal.Length)) +
geom_segment(aes(x = Petal.Length, y = Petal.Width, xend = proj_x, yend = proj_y)) +
geom_point(shape = 21, color = 'black', size = 2) +
coord_fixed(ratio = 1)
# And see how the metrics look
iris_projection %>%
summarize(reconstruction_error = mean(sqrt((Petal.Length - proj_x)^2 + (Petal.Width - proj_y)^2)),
variance_retained = var(projection) / (var(Petal.Length) + var(Petal.Width)))
# The angle of the line in degrees. ADJUST THIS
angle = 23
# For graphing purposes, we need to know the slope of this line
slope = sin(angle * pi / 180) / cos(angle * pi / 180)
# A bit of linear algebra to find the projections
iris_projection <- iris %>%
as_tibble() %>%
mutate(projection = (Petal.Length - mean(iris$Petal.Length)) * cos(angle * pi / 180)  + (Petal.Width - mean(iris$Petal.Width)) * sin(angle * pi / 180),
proj_x = mean(iris$Petal.Length) + projection * cos(angle * pi / 180), proj_y = mean(iris$Petal.Width) + projection * sin(angle*pi / 180))
# Then plot it
iris_projection %>%
ggplot(aes(x = Petal.Length, y = Petal.Width, fill = Species)) +
geom_abline(slope = slope, intercept = mean(iris$Petal.Width) - slope*mean(iris$Petal.Length)) +
geom_segment(aes(x = Petal.Length, y = Petal.Width, xend = proj_x, yend = proj_y)) +
geom_point(shape = 21, color = 'black', size = 2) +
coord_fixed(ratio = 1)
# And see how the metrics look
iris_projection %>%
summarize(reconstruction_error = mean(sqrt((Petal.Length - proj_x)^2 + (Petal.Width - proj_y)^2)),
variance_retained = var(projection) / (var(Petal.Length) + var(Petal.Width)))
# The angle of the line in degrees. ADJUST THIS
angle = 22.5
# For graphing purposes, we need to know the slope of this line
slope = sin(angle * pi / 180) / cos(angle * pi / 180)
# A bit of linear algebra to find the projections
iris_projection <- iris %>%
as_tibble() %>%
mutate(projection = (Petal.Length - mean(iris$Petal.Length)) * cos(angle * pi / 180)  + (Petal.Width - mean(iris$Petal.Width)) * sin(angle * pi / 180),
proj_x = mean(iris$Petal.Length) + projection * cos(angle * pi / 180), proj_y = mean(iris$Petal.Width) + projection * sin(angle*pi / 180))
# Then plot it
iris_projection %>%
ggplot(aes(x = Petal.Length, y = Petal.Width, fill = Species)) +
geom_abline(slope = slope, intercept = mean(iris$Petal.Width) - slope*mean(iris$Petal.Length)) +
geom_segment(aes(x = Petal.Length, y = Petal.Width, xend = proj_x, yend = proj_y)) +
geom_point(shape = 21, color = 'black', size = 2) +
coord_fixed(ratio = 1)
# And see how the metrics look
iris_projection %>%
summarize(reconstruction_error = mean(sqrt((Petal.Length - proj_x)^2 + (Petal.Width - proj_y)^2)),
variance_retained = var(projection) / (var(Petal.Length) + var(Petal.Width)))
# The angle of the line in degrees. ADJUST THIS
angle = 22.3
# For graphing purposes, we need to know the slope of this line
slope = sin(angle * pi / 180) / cos(angle * pi / 180)
# A bit of linear algebra to find the projections
iris_projection <- iris %>%
as_tibble() %>%
mutate(projection = (Petal.Length - mean(iris$Petal.Length)) * cos(angle * pi / 180)  + (Petal.Width - mean(iris$Petal.Width)) * sin(angle * pi / 180),
proj_x = mean(iris$Petal.Length) + projection * cos(angle * pi / 180), proj_y = mean(iris$Petal.Width) + projection * sin(angle*pi / 180))
# Then plot it
iris_projection %>%
ggplot(aes(x = Petal.Length, y = Petal.Width, fill = Species)) +
geom_abline(slope = slope, intercept = mean(iris$Petal.Width) - slope*mean(iris$Petal.Length)) +
geom_segment(aes(x = Petal.Length, y = Petal.Width, xend = proj_x, yend = proj_y)) +
geom_point(shape = 21, color = 'black', size = 2) +
coord_fixed(ratio = 1)
# And see how the metrics look
iris_projection %>%
summarize(reconstruction_error = mean(sqrt((Petal.Length - proj_x)^2 + (Petal.Width - proj_y)^2)),
variance_retained = var(projection) / (var(Petal.Length) + var(Petal.Width)))
# The angle of the line in degrees. ADJUST THIS
angle = 22.7
# For graphing purposes, we need to know the slope of this line
slope = sin(angle * pi / 180) / cos(angle * pi / 180)
# A bit of linear algebra to find the projections
iris_projection <- iris %>%
as_tibble() %>%
mutate(projection = (Petal.Length - mean(iris$Petal.Length)) * cos(angle * pi / 180)  + (Petal.Width - mean(iris$Petal.Width)) * sin(angle * pi / 180),
proj_x = mean(iris$Petal.Length) + projection * cos(angle * pi / 180), proj_y = mean(iris$Petal.Width) + projection * sin(angle*pi / 180))
# Then plot it
iris_projection %>%
ggplot(aes(x = Petal.Length, y = Petal.Width, fill = Species)) +
geom_abline(slope = slope, intercept = mean(iris$Petal.Width) - slope*mean(iris$Petal.Length)) +
geom_segment(aes(x = Petal.Length, y = Petal.Width, xend = proj_x, yend = proj_y)) +
geom_point(shape = 21, color = 'black', size = 2) +
coord_fixed(ratio = 1)
# And see how the metrics look
iris_projection %>%
summarize(reconstruction_error = mean(sqrt((Petal.Length - proj_x)^2 + (Petal.Width - proj_y)^2)),
variance_retained = var(projection) / (var(Petal.Length) + var(Petal.Width)))
# The angle of the line in degrees. ADJUST THIS
angle = 22.6
# For graphing purposes, we need to know the slope of this line
slope = sin(angle * pi / 180) / cos(angle * pi / 180)
# A bit of linear algebra to find the projections
iris_projection <- iris %>%
as_tibble() %>%
mutate(projection = (Petal.Length - mean(iris$Petal.Length)) * cos(angle * pi / 180)  + (Petal.Width - mean(iris$Petal.Width)) * sin(angle * pi / 180),
proj_x = mean(iris$Petal.Length) + projection * cos(angle * pi / 180), proj_y = mean(iris$Petal.Width) + projection * sin(angle*pi / 180))
# Then plot it
iris_projection %>%
ggplot(aes(x = Petal.Length, y = Petal.Width, fill = Species)) +
geom_abline(slope = slope, intercept = mean(iris$Petal.Width) - slope*mean(iris$Petal.Length)) +
geom_segment(aes(x = Petal.Length, y = Petal.Width, xend = proj_x, yend = proj_y)) +
geom_point(shape = 21, color = 'black', size = 2) +
coord_fixed(ratio = 1)
# And see how the metrics look
iris_projection %>%
summarize(reconstruction_error = mean(sqrt((Petal.Length - proj_x)^2 + (Petal.Width - proj_y)^2)),
variance_retained = var(projection) / (var(Petal.Length) + var(Petal.Width)))
# The angle of the line in degrees. ADJUST THIS
angle = 22.8
# For graphing purposes, we need to know the slope of this line
slope = sin(angle * pi / 180) / cos(angle * pi / 180)
# A bit of linear algebra to find the projections
iris_projection <- iris %>%
as_tibble() %>%
mutate(projection = (Petal.Length - mean(iris$Petal.Length)) * cos(angle * pi / 180)  + (Petal.Width - mean(iris$Petal.Width)) * sin(angle * pi / 180),
proj_x = mean(iris$Petal.Length) + projection * cos(angle * pi / 180), proj_y = mean(iris$Petal.Width) + projection * sin(angle*pi / 180))
# Then plot it
iris_projection %>%
ggplot(aes(x = Petal.Length, y = Petal.Width, fill = Species)) +
geom_abline(slope = slope, intercept = mean(iris$Petal.Width) - slope*mean(iris$Petal.Length)) +
geom_segment(aes(x = Petal.Length, y = Petal.Width, xend = proj_x, yend = proj_y)) +
geom_point(shape = 21, color = 'black', size = 2) +
coord_fixed(ratio = 1)
# And see how the metrics look
iris_projection %>%
summarize(reconstruction_error = mean(sqrt((Petal.Length - proj_x)^2 + (Petal.Width - proj_y)^2)),
variance_retained = var(projection) / (var(Petal.Length) + var(Petal.Width)))
penguins %>% head()
setwd("~/Documents/NSS/Class_Slides_Notebooks/20_12_19_unsupervised/Unsupervised-01-PCA/exercises")
penguins <- read_csv('data/penguins.csv')
penguins %>% head()
penguins %>%
select(bill_length_mm:body_mass_g) %>%
penguins %>%
select(bill_length_mm:body_mass_g)
penguins %>%
select(bill_length_mm:body_mass_g) %>%
drop_na()
penguins %>%
select(bill_length_mm:body_mass_g) %>%
drop_na() %>%
prcomp()
penguins_pca <- penguins %>%
select(bill_length_mm:body_mass_g) %>%
drop_na() %>%
prcomp()
summary(penguins_pca)
penguins_pca$rotation
cov(penguins_pca$rotation)
cov(penguins_pca)
cov(penguins)
penguins_cov <- penguins %>%
select(bill_length_mm:body_mass_g) %>%
drop_na() %>%
prcomp()
penguins_cov
penguins_cov <- penguins %>%
select(bill_length_mm:body_mass_g) %>%
drop_na() %>%
cov()
penguins_cov
penguins_scaled_pca <- penguins %>%
select(bill_length_mm:body_mass_g) %>%
drop_na() %>%
prcomp(scale=TRUE)
summary(penguins_scaled_pca)
penguins_scaled_pca$rotation
penguins_scaled_pca %>% summary
summary(penguins_scaled_pca)
penguins_scaled_pca %>% summary
setwd("~/Documents/nss_projects/dq5-people3-park-n-sew-1/People3ParkNSew")
?fileInput
?fileInput
library(shiny)
library(tidyverse)
library(ggplot2)
library(shinydashboard)
library(RColorBrewer)
?fileInput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
